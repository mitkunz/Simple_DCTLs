DEFINE_UI_PARAMS(saturationAdjustment, Log Saturation, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 5.0, 0.1)
DEFINE_UI_PARAMS(logOffset, Log Offset, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.0, 0.1)
DEFINE_UI_PARAMS(opt, Channel Option, DCTLUI_COMBO_BOX, 0, { ALL, RED, GREEN, BLUE }, { All Channels, Channel Red, Channel Green, Channel Blue })

__DEVICE__ float hueToRgb(float p, float q, float t)
{
    if (t < 0.0f) t += 1.0f;
    if (t > 1.0f) t -= 1.0f;
    if (t < 1.0f / 6.0f) return p + (q - p) * 6.0f * t;
    if (t < 1.0f / 2.0f) return q;
    if (t < 2.0f / 3.0f) return p + (q - p) * (2.0f / 3.0f - t) * 6.0f;
    return p;
}

__DEVICE__ float3 hslToRgb(float3 hsl)
{
    float hue = hsl.x;
    float saturation = hsl.y;
    float lightness = hsl.z;

    if (saturation == 0.0f)
        return make_float3(lightness, lightness, lightness);

    float q = lightness < 0.5f ? lightness * (1.0f + saturation) : lightness + saturation - lightness * saturation;
    float p = 2.0f * lightness - q;

    float r = hueToRgb(p, q, hue + 1.0f / 3.0f);
    float g = hueToRgb(p, q, hue);
    float b = hueToRgb(p, q, hue - 1.0f / 3.0f);

    return make_float3(r, g, b);
}

__DEVICE__ float3 rgbToHsl(float3 rgb)
{
    float r = rgb.r;
    float g = rgb.g;
    float b = rgb.b;

    float maxVal = (r > g) ? ((r > b) ? r : b) : ((g > b) ? g : b);
    float minVal = (r < g) ? ((r < b) ? r : b) : ((g < b) ? g : b);

    float h, s, l;
    h = s = l = 0.0f;

    l = (maxVal + minVal) * 0.5f;

    if (maxVal == minVal)
    {
        h = s = 0.0f; // achromatic case
    }
    else
    {
        float d = maxVal - minVal;
        s = l > 0.5f ? d / (2.0f - maxVal - minVal) : d / (maxVal + minVal);

        if (maxVal == r)
            h = (g - b) / d + (g < b ? 6.0f : 0.0f);
        else if (maxVal == g)
            h = (b - r) / d + 2.0f;
        else if (maxVal == b)
            h = (r - g) / d + 4.0f;

        h /= 6.0f;
    }

    return make_float3(h, s, l);
}


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 hsl = rgbToHsl(make_float3(p_R, p_G, p_B));
    float saturationprev = hsl.y;
    float saturation, logsaturation;

    if ((opt == ALL) || (opt == RED) || (opt == GREEN) ||Â (opt == BLUE))
    {
        saturation = hsl.y * saturationAdjustment;

        const float threshold_low = 0.1f;
        const float threshold_high = 0.9f;
        if (saturation >= threshold_high)
            saturation = threshold_high + (1.0f - threshold_high) * _logf(1.0f + (saturation - threshold_high) / (1.0f - threshold_high)) * 0.5f;
        if (saturation <= threshold_low)
            saturation = threshold_low - (1.0f - threshold_low) * _logf(1.0f + (threshold_low - saturation) / threshold_low) * 0.005f;
        hsl.y = saturation * logOffset;
    }

    p_R = ((opt == ALL) || (opt == RED))   ? hslToRgb(hsl).r : p_R;
    p_G = ((opt == ALL) || (opt == GREEN)) ? hslToRgb(hsl).g : p_G;
    p_B = ((opt == ALL) || (opt == BLUE))  ? hslToRgb(hsl).b : p_B;
    
    return make_float3(p_R, p_G, p_B);
}
